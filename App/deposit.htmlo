<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Deposit Funds - Pocket-Investie</title>
    <style>
        :root {
            --primary: #2c3e50;
            --secondary: #3498db;
            --accent: #e74c3c;
            --light: #ecf0f1;
            --dark: #2c3e50;
            --success: #2ecc71;
            --warning: #f39c12;
            --danger: #e74c3c;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f5f7fa;
            color: #333;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            background: var(--primary);
            color: white;
            padding: 1rem;
            border-radius: 8px 8px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .logo {
            font-size: 1.5rem;
            font-weight: bold;
        }
        
        .user-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .balance {
            background: var(--secondary);
            padding: 5px 15px;
            border-radius: 20px;
            font-weight: bold;
        }
        
        .main-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-top: 20px;
        }
        
        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }
        }
        
        .card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 20px;
            margin-bottom: 20px;
        }
        
        .card-title {
            font-size: 1.2rem;
            margin-bottom: 15px;
            color: var(--dark);
            border-bottom: 2px solid var(--light);
            padding-bottom: 10px;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        
        input, select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }
        
        button {
            background: var(--secondary);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: bold;
            width: 100%;
            transition: background 0.3s;
        }
        
        button:hover {
            background: #2980b9;
        }
        
        .transaction-history {
            max-height: 400px;
            overflow-y: auto;
        }
        
        .transaction-item {
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }
        
        .transaction-amount {
            font-weight: bold;
        }
        
        .transaction-status {
            padding: 3px 8px;
            border-radius: 4px;
            font-size: 0.8rem;
        }
        
        .status-completed {
            background: #e6f7ee;
            color: #00a65a;
        }
        
        .status-pending {
            background: #fef5e7;
            color: #f39c12;
        }
        
        .status-failed {
            background: #fdecea;
            color: #e74c3c;
        }
        
        .loading {
            display: none;
            text-align: center;
            margin: 20px 0;
        }
        
        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-left: 4px solid var(--secondary);
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .alert {
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 15px;
            display: none;
        }
        
        .alert-success {
            background: #e6f7ee;
            color: #00a65a;
            border: 1px solid #00a65a;
        }
        
        .alert-error {
            background: #fdecea;
            color: #e74c3c;
            border: 1px solid #e74c3c;
        }
        
        .payment-options {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .payment-option {
            flex: 1;
            text-align: center;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .payment-option.selected {
            border-color: var(--secondary);
            background: rgba(52, 152, 219, 0.1);
        }
        
        .payment-option img {
            height: 30px;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="logo">Pocket-Investie</div>
            <div class="user-info">
                <span>Hello, <span id="user-name">User</span></span>
                <div class="balance">₦<span id="current-balance">0.00</span></div>
            </div>
        </header>
        
        <div class="alert alert-success" id="success-alert"></div>
        <div class="alert alert-error" id="error-alert"></div>
        
        <div class="main-content">
            <div class="card">
                <h2 class="card-title">Deposit Funds</h2>
                
                <div class="payment-options">
                    <div class="payment-option selected" data-method="paystack">
                        <img src="https://pluginslab.com/wp-content/uploads/2020/10/paystack-logo.png" alt="Paystack">
                    </div>
                    <div class="payment-option" data-method="bank">
                        <span>Bank Transfer</span>
                    </div>
                </div>
                
                <div id="paystack-form">
                    <div class="form-group">
                        <label for="amount">Amount (₦)</label>
                        <input type="number" id="amount" placeholder="Enter amount" min="100" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="email">Email</label>
                        <input type="email" id="email" placeholder="Your email address" required>
                    </div>
                    
                    <button id="deposit-btn">Proceed to Payment</button>
                </div>
                
                <div id="bank-form" style="display: none;">
                    <div class="form-group">
                        <label>Bank Transfer Details</label>
                        <p>Bank: Moremonee microfinance Bank</p>
                        <p>Account Number: 7062791952</p>
                        <p>Account Name: Victor Chukwuka Ltd</p>
                        <p>Please use your user ID as reference</p>
                    </div>
                    
                    <div class="form-group">
                        <label for="transfer-amount">Amount (₦)</label>
                        <input type="number" id="transfer-amount" placeholder="Enter amount" min="100" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="proof">Upload Proof of Payment</label>
                        <input type="file" id="proof" accept="image/*" required>
                    </div>
                    
                    <button id="confirm-transfer">Confirm Transfer</button>
                </div>
                
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <p>Processing your request...</p>
                </div>
            </div>
            
            <div class="card">
                <h2 class="card-title">Recent Transactions</h2>
                <div class="transaction-history" id="transaction-history">
                    <!-- Transactions will be loaded here -->
                    <p class="empty-transactions">No recent transactions</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Include Firebase and Paystack SDKs -->
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-firestore.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-auth.js"></script>
    <script src="https://js.paystack.co/v1/inline.js"></script>

    <script>
        // Firebase configuration (replace with your actual config)
        const firebaseConfig = {
            apiKey: "AIzaSyDQ8AejmnXU8lO1mHdMNoL8G85nmxnYn_A",
            authDomain: "pocket-investie.firebaseapp.com",
            projectId: "pocket-investie",
            storageBucket: pocket-investie.firebasestorage.app",
            messagingSenderId: "246875262393",
            appId: "1:246875262393:web:f0468ca3f1da95f4b4fa68"
        };
        
        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const db = firebase.firestore();
        const auth = firebase.auth();
        
        // Paystack public key (replace with your actual key)
        const paystackPublicKey = "pk_test_YOUR_PUBLIC_KEY";
        
        // Global variables
        let currentUser = null;
        let userData = null;
        
        // DOM elements
        const amountInput = document.getElementById('amount');
        const emailInput = document.getElementById('email');
        const depositBtn = document.getElementById('deposit-btn');
        const currentBalanceEl = document.getElementById('current-balance');
        const userNameEl = document.getElementById('user-name');
        const transactionHistoryEl = document.getElementById('transaction-history');
        const loadingEl = document.getElementById('loading');
        const successAlertEl = document.getElementById('success-alert');
        const errorAlertEl = document.getElementById('error-alert');
        const paymentOptions = document.querySelectorAll('.payment-option');
        const paystackForm = document.getElementById('paystack-form');
        const bankForm = document.getElementById('bank-form');
        
        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            initApp();
            setupEventListeners();
        });
        
        function initApp() {
            auth.onAuthStateChanged(user => {
                if (user) {
                    currentUser = user;
                    userNameEl.textContent = user.displayName || user.email;
                    loadUserData();
                    loadTransactionHistory();
                } else {
                    // Redirect to login if not authenticated
                    window.location.href = 'auth.html';
                }
            });
        }
        
        function setupEventListeners() {
            // Payment method selection
            paymentOptions.forEach(option => {
                option.addEventListener('click', () => {
                    paymentOptions.forEach(opt => opt.classList.remove('selected'));
                    option.classList.add('selected');
                    
                    if (option.dataset.method === 'paystack') {
                        paystackForm.style.display = 'block';
                        bankForm.style.display = 'none';
                    } else {
                        paystackForm.style.display = 'none';
                        bankForm.style.display = 'block';
                    }
                });
            });
            
            // Deposit button click
            depositBtn.addEventListener('click', processDeposit);
            
            // Bank transfer confirmation
            document.getElementById('confirm-transfer').addEventListener('click', processBankTransfer);
        }
        
        function loadUserData() {
            db.collection('users').doc(currentUser.uid).onSnapshot(doc => {
                if (doc.exists) {
                    userData = doc.data();
                    currentBalanceEl.textContent = userData.balance.toFixed(2);
                } else {
                    // Create user document if it doesn't exist
                    db.collection('users').doc(currentUser.uid).set({
                        balance: 0,
                        email: currentUser.email,
                        name: currentUser.displayName || currentUser.email,
                        createdAt: firebase.firestore.FieldValue.serverTimestamp()
                    });
                }
            }, error => {
                showError('Error loading user data: ' + error.message);
            });
        }
        
        function loadTransactionHistory() {
            db.collection('transactions')
                .where('userId', '==', currentUser.uid)
                .orderBy('createdAt', 'desc')
                .limit(5)
                .onSnapshot(snapshot => {
                    if (snapshot.empty) {
                        transactionHistoryEl.innerHTML = '<p class="empty-transactions">No recent transactions</p>';
                        return;
                    }
                    
                    let transactionsHTML = '';
                    snapshot.forEach(doc => {
                        const transaction = doc.data();
                        transactionsHTML += `
                            <div class="transaction-item">
                                <div class="transaction-info">
                                    <div class="transaction-type">${transaction.type}</div>
                                    <div class="transaction-date">${formatDate(transaction.createdAt)}</div>
                                </div>
                                <div class="transaction-amount">₦${transaction.amount.toFixed(2)}</div>
                                <div class="transaction-status status-${transaction.status}">${transaction.status}</div>
                            </div>
                        `;
                    });
                    
                    transactionHistoryEl.innerHTML = transactionsHTML;
                }, error => {
                    showError('Error loading transactions: ' + error.message);
                });
        }
        
        function processDeposit() {
            const amount = parseFloat(amountInput.value);
            const email = emailInput.value;
            
            if (!amount || amount < 100) {
                showError('Please enter a valid amount (minimum ₦100)');
                return;
            }
            
            if (!email || !isValidEmail(email)) {
                showError('Please enter a valid email address');
                return;
            }
            
            showLoading();
            
            // Create transaction record
            const transactionData = {
                userId: currentUser.uid,
                amount: amount,
                type: 'deposit',
                status: 'pending',
                method: 'paystack',
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                updatedAt: firebase.firestore.FieldValue.serverTimestamp()
            };
            
            db.collection('transactions').add(transactionData)
                .then(docRef => {
                    // Initialize Paystack payment
                    const handler = PaystackPop.setup({
                        key: paystackPublicKey,
                        email: email,
                        amount: amount * 100, // Convert to kobo
                        currency: 'NGN',
                        ref: 'PI-' + Date.now(), // Generate a unique reference
                        metadata: {
                            custom_fields: [
                                {
                                    display_name: "User ID",
                                    variable_name: "user_id",
                                    value: currentUser.uid
                                },
                                {
                                    display_name: "Transaction ID",
                                    variable_name: "transaction_id",
                                    value: docRef.id
                                }
                            ]
                        },
                        callback: function(response) {
                            // Payment successful
                            updateTransactionSuccess(docRef.id, response.reference);
                        },
                        onClose: function() {
                            // Payment closed
                            hideLoading();
                            showError('Payment was not completed');
                        }
                    });
                    
                    handler.openIframe();
                })
                .catch(error => {
                    hideLoading();
                    showError('Error processing deposit: ' + error.message);
                });
        }
        
        function processBankTransfer() {
            const amount = parseFloat(document.getElementById('transfer-amount').value);
            const proofFile = document.getElementById('proof').files[0];
            
            if (!amount || amount < 100) {
                showError('Please enter a valid amount (minimum ₦100)');
                return;
            }
            
            if (!proofFile) {
                showError('Please upload proof of payment');
                return;
            }
            
            showLoading();
            
            // Create transaction record for bank transfer
            const transactionData = {
                userId: currentUser.uid,
                amount: amount,
                type: 'deposit',
                status: 'pending',
                method: 'bank_transfer',
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                updatedAt: firebase.firestore.FieldValue.serverTimestamp()
            };
            
            db.collection('transactions').add(transactionData)
                .then(docRef => {
                    // In a real app, you would upload the file to Firebase Storage
                    // and update the transaction with the file URL
                    
                    // For demo purposes, we'll just simulate a successful transaction
                    setTimeout(() => {
                        updateTransactionSuccess(docRef.id, 'BANK-REF-' + Date.now());
                    }, 2000);
                })
                .catch(error => {
                    hideLoading();
                    showError('Error processing bank transfer: ' + error.message);
                });
        }
        
        function updateTransactionSuccess(transactionId, reference) {
            // Update transaction status
            db.collection('transactions').doc(transactionId).update({
            status: 'completed',
                reference: reference,
                updatedAt: firebase.firestore.FieldValue.serverTimestamp()
            })
            .then(() => {
                // Get transaction amount to update user balance
                return db.collection('transactions').doc(transactionId).get();
            })
            .then(doc => {
                const transaction = doc.data();
                
                // Update user balance
                return db.collection('users').doc(currentUser.uid).update({
                    balance: firebase.firestore.FieldValue.increment(transaction.amount),
                    updatedAt: firebase.firestore.FieldValue.serverTimestamp()
                });
            })
            .then(() => {
                hideLoading();
                showSuccess('Deposit successful! Your balance has been updated.');
                clearForm();
            })
            .catch(error => {
                hideLoading();
                showError('Error updating transaction: ' + error.message);
            });
        }
        
        function clearForm() {
            amountInput.value = '';
            emailInput.value = currentUser.email || '';
            document.getElementById('transfer-amount').value = '';
            document.getElementById('proof').value = '';
        }
        
        function showLoading() {
            loadingEl.style.display = 'block';
        }
        
        function hideLoading() {
            loadingEl.style.display = 'none';
        }
        
        function showSuccess(message) {
            successAlertEl.textContent = message;
            successAlertEl.style.display = 'block';
            setTimeout(() => {
                successAlertEl.style.display = 'none';
            }, 5000);
        }
        
        function showError(message) {
            errorAlertEl.textContent = message;
            errorAlertEl.style.display = 'block';
            setTimeout(() => {
                errorAlertEl.style.display = 'none';
            }, 5000);
        }
        
        function isValidEmail(email) {
            const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(email);
        }
        
        function formatDate(timestamp) {
            if (!timestamp) return '';
            const date = timestamp.toDate();
            return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
        }
    </script>
</body>
</html>
